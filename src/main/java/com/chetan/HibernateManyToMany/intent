https://www.tutorialspoint.com/hibernate/hibernate_many_to_many_mapping.htm

Define RDBMS Tables:

Consider a situation where we need to store our employee records in
EMPLOYEE table which will have following structure:

create table EMPLOYEE (
   id INT NOT NULL auto_increment,
   first_name VARCHAR(20) default NULL,
   last_name  VARCHAR(20) default NULL,
   salary     INT  default NULL,
   PRIMARY KEY (id)
);

Further, assume each employee can have one or more
certificate associated with him/her and a similar certificate can be associated with more than one employee.
 We will store certificate related information in a separate table which has following structure:

create table CERTIFICATE (
   id INT NOT NULL auto_increment,
   certificate_name VARCHAR(30) default NULL,
   PRIMARY KEY (id)
);

Now to implement many-to-many relationship between EMPLOYEE and CERTIFICATE objects,
 we would have to introduce one more intermediate table having Employee ID and Certificate ID as follows:

create table EMP_CERT (
   employee_id INT NOT NULL,
   certificate_id INT NOT NULL,
   PRIMARY KEY (employee_id,certificate_id)
);

The <set> element sets the relationship between Certificate and Employee classes.
We set cascade attribute to save-update to tell Hibernate to persist the Certificate objects for
SAVE i.e. CREATE and UPDATE operations at the same time as the Employee objects.

The name attribute is set to the defined Set variable in the parent class, in our case it is certificates.
For each set variable, we need to define a separate set element in the mapping file.
Here we used name attribute to set the intermediate table name to EMP_CERT.

The <key> element is the column in the EMP_CERT table that holds the foreign key to the
 parent object ie. table EMPLOYEE and links to the certification_id in the CERTIFICATE table.

The <many-to-many> element indicates that one Employee object relates to many Certificate
objects and column attributes are used to link intermediate EMP_CERT.


